# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywrapgraph', [dirname(__file__)])
        except ImportError:
            import _pywrapgraph
            return _pywrapgraph
        if fp is not None:
            try:
                _mod = imp.load_module('_pywrapgraph', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywrapgraph = swig_import_helper()
    del swig_import_helper
else:
    import _pywrapgraph
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapgraph.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pywrapgraph.SwigPyIterator_value(self)
    def incr(self, n=1): return _pywrapgraph.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pywrapgraph.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pywrapgraph.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pywrapgraph.SwigPyIterator_equal(self, *args)
    def copy(self): return _pywrapgraph.SwigPyIterator_copy(self)
    def next(self): return _pywrapgraph.SwigPyIterator_next(self)
    def __next__(self): return _pywrapgraph.SwigPyIterator___next__(self)
    def previous(self): return _pywrapgraph.SwigPyIterator_previous(self)
    def advance(self, *args): return _pywrapgraph.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pywrapgraph.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pywrapgraph.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pywrapgraph.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pywrapgraph.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pywrapgraph.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pywrapgraph.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pywrapgraph.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class MaxFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaxFlow, name)
    __repr__ = _swig_repr
    NOT_SOLVED = _pywrapgraph.MaxFlow_NOT_SOLVED
    OPTIMAL = _pywrapgraph.MaxFlow_OPTIMAL
    FEASIBLE = _pywrapgraph.MaxFlow_FEASIBLE
    INFEASIBLE = _pywrapgraph.MaxFlow_INFEASIBLE
    BAD_INPUT = _pywrapgraph.MaxFlow_BAD_INPUT
    BAD_RESULT = _pywrapgraph.MaxFlow_BAD_RESULT
    def __init__(self, *args): 
        this = _pywrapgraph.new_MaxFlow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywrapgraph.delete_MaxFlow
    __del__ = lambda self : None;
    def graph(self): return _pywrapgraph.MaxFlow_graph(self)
    def status(self): return _pywrapgraph.MaxFlow_status(self)
    def GetSourceNodeIndex(self): return _pywrapgraph.MaxFlow_GetSourceNodeIndex(self)
    def GetSinkNodeIndex(self): return _pywrapgraph.MaxFlow_GetSinkNodeIndex(self)
    def SetArcCapacity(self, *args): return _pywrapgraph.MaxFlow_SetArcCapacity(self, *args)
    def SetArcFlow(self, *args): return _pywrapgraph.MaxFlow_SetArcFlow(self, *args)
    def Solve(self): return _pywrapgraph.MaxFlow_Solve(self)
    def GetOptimalFlow(self): return _pywrapgraph.MaxFlow_GetOptimalFlow(self)
    def Flow(self, *args): return _pywrapgraph.MaxFlow_Flow(self, *args)
    def Capacity(self, *args): return _pywrapgraph.MaxFlow_Capacity(self, *args)
MaxFlow_swigregister = _pywrapgraph.MaxFlow_swigregister
MaxFlow_swigregister(MaxFlow)

class MinCostFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinCostFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinCostFlow, name)
    __repr__ = _swig_repr
    NOT_SOLVED = _pywrapgraph.MinCostFlow_NOT_SOLVED
    OPTIMAL = _pywrapgraph.MinCostFlow_OPTIMAL
    FEASIBLE = _pywrapgraph.MinCostFlow_FEASIBLE
    INFEASIBLE = _pywrapgraph.MinCostFlow_INFEASIBLE
    UNBALANCED = _pywrapgraph.MinCostFlow_UNBALANCED
    BAD_RESULT = _pywrapgraph.MinCostFlow_BAD_RESULT
    BAD_COST_RANGE = _pywrapgraph.MinCostFlow_BAD_COST_RANGE
    def __init__(self, *args): 
        this = _pywrapgraph.new_MinCostFlow(*args)
        try: self.this.append(this)
        except: self.this = this
    def graph(self): return _pywrapgraph.MinCostFlow_graph(self)
    def status(self): return _pywrapgraph.MinCostFlow_status(self)
    def SetNodeSupply(self, *args): return _pywrapgraph.MinCostFlow_SetNodeSupply(self, *args)
    def SetArcUnitCost(self, *args): return _pywrapgraph.MinCostFlow_SetArcUnitCost(self, *args)
    def SetArcCapacity(self, *args): return _pywrapgraph.MinCostFlow_SetArcCapacity(self, *args)
    def SetArcFlow(self, *args): return _pywrapgraph.MinCostFlow_SetArcFlow(self, *args)
    def Solve(self): return _pywrapgraph.MinCostFlow_Solve(self)
    def CheckFeasibility(self, *args): return _pywrapgraph.MinCostFlow_CheckFeasibility(self, *args)
    def MakeFeasible(self): return _pywrapgraph.MinCostFlow_MakeFeasible(self)
    def GetOptimalCost(self): return _pywrapgraph.MinCostFlow_GetOptimalCost(self)
    def Flow(self, *args): return _pywrapgraph.MinCostFlow_Flow(self, *args)
    def Capacity(self, *args): return _pywrapgraph.MinCostFlow_Capacity(self, *args)
    def Cost(self, *args): return _pywrapgraph.MinCostFlow_Cost(self, *args)
    def Supply(self, *args): return _pywrapgraph.MinCostFlow_Supply(self, *args)
    def InitialSupply(self, *args): return _pywrapgraph.MinCostFlow_InitialSupply(self, *args)
    def FeasibleSupply(self, *args): return _pywrapgraph.MinCostFlow_FeasibleSupply(self, *args)
    __swig_destroy__ = _pywrapgraph.delete_MinCostFlow
    __del__ = lambda self : None;
MinCostFlow_swigregister = _pywrapgraph.MinCostFlow_swigregister
MinCostFlow_swigregister(MinCostFlow)

class StarStarGraphBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StarStarGraphBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StarStarGraphBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def num_nodes(self): return _pywrapgraph.StarStarGraphBase_num_nodes(self)
    def num_arcs(self): return _pywrapgraph.StarStarGraphBase_num_arcs(self)
    def end_node_index(self): return _pywrapgraph.StarStarGraphBase_end_node_index(self)
    def end_arc_index(self): return _pywrapgraph.StarStarGraphBase_end_arc_index(self)
    def max_num_nodes(self): return _pywrapgraph.StarStarGraphBase_max_num_nodes(self)
    def max_num_arcs(self): return _pywrapgraph.StarStarGraphBase_max_num_arcs(self)
    def max_end_node_index(self): return _pywrapgraph.StarStarGraphBase_max_end_node_index(self)
    def max_end_arc_index(self): return _pywrapgraph.StarStarGraphBase_max_end_arc_index(self)
    def IsNodeValid(self, *args): return _pywrapgraph.StarStarGraphBase_IsNodeValid(self, *args)
    def LookUpArc(self, *args): return _pywrapgraph.StarStarGraphBase_LookUpArc(self, *args)
    def Head(self, *args): return _pywrapgraph.StarStarGraphBase_Head(self, *args)
    def NodeDebugString(self, *args): return _pywrapgraph.StarStarGraphBase_NodeDebugString(self, *args)
    def ArcDebugString(self, *args): return _pywrapgraph.StarStarGraphBase_ArcDebugString(self, *args)
StarStarGraphBase_swigregister = _pywrapgraph.StarStarGraphBase_swigregister
StarStarGraphBase_swigregister(StarStarGraphBase)
cvar = _pywrapgraph.cvar
StarStarGraphBase.kNilNode = _pywrapgraph.cvar.StarStarGraphBase_kNilNode
StarStarGraphBase.kNilArc = _pywrapgraph.cvar.StarStarGraphBase_kNilArc
StarStarGraphBase.kFirstNode = _pywrapgraph.cvar.StarStarGraphBase_kFirstNode
StarStarGraphBase.kFirstArc = _pywrapgraph.cvar.StarStarGraphBase_kFirstArc
StarStarGraphBase.kMaxNumNodes = _pywrapgraph.cvar.StarStarGraphBase_kMaxNumNodes
StarStarGraphBase.kMaxNumArcs = _pywrapgraph.cvar.StarStarGraphBase_kMaxNumArcs

class StarGraphCore(StarStarGraphBase):
    __swig_setmethods__ = {}
    for _s in [StarStarGraphBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StarGraphCore, name, value)
    __swig_getmethods__ = {}
    for _s in [StarStarGraphBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StarGraphCore, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Reserve(self, *args): return _pywrapgraph.StarGraphCore_Reserve(self, *args)
    def AddArc(self, *args): return _pywrapgraph.StarGraphCore_AddArc(self, *args)
StarGraphCore_swigregister = _pywrapgraph.StarGraphCore_swigregister
StarGraphCore_swigregister(StarGraphCore)

class StarGraph(StarGraphCore):
    __swig_setmethods__ = {}
    for _s in [StarGraphCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StarGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [StarGraphCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StarGraph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywrapgraph.new_StarGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywrapgraph.delete_StarGraph
    __del__ = lambda self : None;
    def CheckArcBounds(self, *args): return _pywrapgraph.StarGraph_CheckArcBounds(self, *args)
    def CheckArcValidity(self, *args): return _pywrapgraph.StarGraph_CheckArcValidity(self, *args)
    def Tail(self, *args): return _pywrapgraph.StarGraph_Tail(self, *args)
    def DirectArcTail(self, *args): return _pywrapgraph.StarGraph_DirectArcTail(self, *args)
    def DirectArcHead(self, *args): return _pywrapgraph.StarGraph_DirectArcHead(self, *args)
    def DirectArc(self, *args): return _pywrapgraph.StarGraph_DirectArc(self, *args)
    def ReverseArc(self, *args): return _pywrapgraph.StarGraph_ReverseArc(self, *args)
    def Opposite(self, *args): return _pywrapgraph.StarGraph_Opposite(self, *args)
    def IsDirect(self, *args): return _pywrapgraph.StarGraph_IsDirect(self, *args)
    def IsReverse(self, *args): return _pywrapgraph.StarGraph_IsReverse(self, *args)
    def IsIncident(self, *args): return _pywrapgraph.StarGraph_IsIncident(self, *args)
    def IsIncoming(self, *args): return _pywrapgraph.StarGraph_IsIncoming(self, *args)
    def IsOutgoing(self, *args): return _pywrapgraph.StarGraph_IsOutgoing(self, *args)
    def BuildRepresentation(self): return _pywrapgraph.StarGraph_BuildRepresentation(self)
    def DebugString(self): return _pywrapgraph.StarGraph_DebugString(self)
StarGraph_swigregister = _pywrapgraph.StarGraph_swigregister
StarGraph_swigregister(StarGraph)

class ForwardStarStarGraphBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardStarStarGraphBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardStarStarGraphBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def num_nodes(self): return _pywrapgraph.ForwardStarStarGraphBase_num_nodes(self)
    def num_arcs(self): return _pywrapgraph.ForwardStarStarGraphBase_num_arcs(self)
    def end_node_index(self): return _pywrapgraph.ForwardStarStarGraphBase_end_node_index(self)
    def end_arc_index(self): return _pywrapgraph.ForwardStarStarGraphBase_end_arc_index(self)
    def max_num_nodes(self): return _pywrapgraph.ForwardStarStarGraphBase_max_num_nodes(self)
    def max_num_arcs(self): return _pywrapgraph.ForwardStarStarGraphBase_max_num_arcs(self)
    def max_end_node_index(self): return _pywrapgraph.ForwardStarStarGraphBase_max_end_node_index(self)
    def max_end_arc_index(self): return _pywrapgraph.ForwardStarStarGraphBase_max_end_arc_index(self)
    def IsNodeValid(self, *args): return _pywrapgraph.ForwardStarStarGraphBase_IsNodeValid(self, *args)
    def LookUpArc(self, *args): return _pywrapgraph.ForwardStarStarGraphBase_LookUpArc(self, *args)
    def Head(self, *args): return _pywrapgraph.ForwardStarStarGraphBase_Head(self, *args)
    def NodeDebugString(self, *args): return _pywrapgraph.ForwardStarStarGraphBase_NodeDebugString(self, *args)
    def ArcDebugString(self, *args): return _pywrapgraph.ForwardStarStarGraphBase_ArcDebugString(self, *args)
ForwardStarStarGraphBase_swigregister = _pywrapgraph.ForwardStarStarGraphBase_swigregister
ForwardStarStarGraphBase_swigregister(ForwardStarStarGraphBase)
ForwardStarStarGraphBase.kNilNode = _pywrapgraph.cvar.ForwardStarStarGraphBase_kNilNode
ForwardStarStarGraphBase.kNilArc = _pywrapgraph.cvar.ForwardStarStarGraphBase_kNilArc
ForwardStarStarGraphBase.kFirstNode = _pywrapgraph.cvar.ForwardStarStarGraphBase_kFirstNode
ForwardStarStarGraphBase.kFirstArc = _pywrapgraph.cvar.ForwardStarStarGraphBase_kFirstArc
ForwardStarStarGraphBase.kMaxNumNodes = _pywrapgraph.cvar.ForwardStarStarGraphBase_kMaxNumNodes
ForwardStarStarGraphBase.kMaxNumArcs = _pywrapgraph.cvar.ForwardStarStarGraphBase_kMaxNumArcs

class ForwardStarGraphCore(ForwardStarStarGraphBase):
    __swig_setmethods__ = {}
    for _s in [ForwardStarStarGraphBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardStarGraphCore, name, value)
    __swig_getmethods__ = {}
    for _s in [ForwardStarStarGraphBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardStarGraphCore, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Reserve(self, *args): return _pywrapgraph.ForwardStarGraphCore_Reserve(self, *args)
    def AddArc(self, *args): return _pywrapgraph.ForwardStarGraphCore_AddArc(self, *args)
ForwardStarGraphCore_swigregister = _pywrapgraph.ForwardStarGraphCore_swigregister
ForwardStarGraphCore_swigregister(ForwardStarGraphCore)

class ForwardStarGraph(ForwardStarGraphCore):
    __swig_setmethods__ = {}
    for _s in [ForwardStarGraphCore]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardStarGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [ForwardStarGraphCore]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardStarGraph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywrapgraph.new_ForwardStarGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywrapgraph.delete_ForwardStarGraph
    __del__ = lambda self : None;
    def CheckArcBounds(self, *args): return _pywrapgraph.ForwardStarGraph_CheckArcBounds(self, *args)
    def CheckArcValidity(self, *args): return _pywrapgraph.ForwardStarGraph_CheckArcValidity(self, *args)
    def CheckTailIndexValidity(self, *args): return _pywrapgraph.ForwardStarGraph_CheckTailIndexValidity(self, *args)
    def Tail(self, *args): return _pywrapgraph.ForwardStarGraph_Tail(self, *args)
    def IsIncoming(self, *args): return _pywrapgraph.ForwardStarGraph_IsIncoming(self, *args)
    def BuildRepresentation(self): return _pywrapgraph.ForwardStarGraph_BuildRepresentation(self)
    def BuildTailArray(self): return _pywrapgraph.ForwardStarGraph_BuildTailArray(self)
    def ReleaseTailArray(self): return _pywrapgraph.ForwardStarGraph_ReleaseTailArray(self)
    def TailArrayComplete(self): return _pywrapgraph.ForwardStarGraph_TailArrayComplete(self)
    def DebugString(self): return _pywrapgraph.ForwardStarGraph_DebugString(self)
ForwardStarGraph_swigregister = _pywrapgraph.ForwardStarGraph_swigregister
ForwardStarGraph_swigregister(ForwardStarGraph)

class ForwardStarStaticStarGraphBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardStarStaticStarGraphBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardStarStaticStarGraphBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def num_nodes(self): return _pywrapgraph.ForwardStarStaticStarGraphBase_num_nodes(self)
    def num_arcs(self): return _pywrapgraph.ForwardStarStaticStarGraphBase_num_arcs(self)
    def end_node_index(self): return _pywrapgraph.ForwardStarStaticStarGraphBase_end_node_index(self)
    def end_arc_index(self): return _pywrapgraph.ForwardStarStaticStarGraphBase_end_arc_index(self)
    def max_num_nodes(self): return _pywrapgraph.ForwardStarStaticStarGraphBase_max_num_nodes(self)
    def max_num_arcs(self): return _pywrapgraph.ForwardStarStaticStarGraphBase_max_num_arcs(self)
    def max_end_node_index(self): return _pywrapgraph.ForwardStarStaticStarGraphBase_max_end_node_index(self)
    def max_end_arc_index(self): return _pywrapgraph.ForwardStarStaticStarGraphBase_max_end_arc_index(self)
    def IsNodeValid(self, *args): return _pywrapgraph.ForwardStarStaticStarGraphBase_IsNodeValid(self, *args)
    def LookUpArc(self, *args): return _pywrapgraph.ForwardStarStaticStarGraphBase_LookUpArc(self, *args)
    def Head(self, *args): return _pywrapgraph.ForwardStarStaticStarGraphBase_Head(self, *args)
    def NodeDebugString(self, *args): return _pywrapgraph.ForwardStarStaticStarGraphBase_NodeDebugString(self, *args)
    def ArcDebugString(self, *args): return _pywrapgraph.ForwardStarStaticStarGraphBase_ArcDebugString(self, *args)
ForwardStarStaticStarGraphBase_swigregister = _pywrapgraph.ForwardStarStaticStarGraphBase_swigregister
ForwardStarStaticStarGraphBase_swigregister(ForwardStarStaticStarGraphBase)
ForwardStarStaticStarGraphBase.kNilNode = _pywrapgraph.cvar.ForwardStarStaticStarGraphBase_kNilNode
ForwardStarStaticStarGraphBase.kNilArc = _pywrapgraph.cvar.ForwardStarStaticStarGraphBase_kNilArc
ForwardStarStaticStarGraphBase.kFirstNode = _pywrapgraph.cvar.ForwardStarStaticStarGraphBase_kFirstNode
ForwardStarStaticStarGraphBase.kFirstArc = _pywrapgraph.cvar.ForwardStarStaticStarGraphBase_kFirstArc
ForwardStarStaticStarGraphBase.kMaxNumNodes = _pywrapgraph.cvar.ForwardStarStaticStarGraphBase_kMaxNumNodes
ForwardStarStaticStarGraphBase.kMaxNumArcs = _pywrapgraph.cvar.ForwardStarStaticStarGraphBase_kMaxNumArcs

class ForwardStarStaticGraph(ForwardStarStaticStarGraphBase):
    __swig_setmethods__ = {}
    for _s in [ForwardStarStaticStarGraphBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardStarStaticGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [ForwardStarStaticStarGraphBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardStarStaticGraph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywrapgraph.new_ForwardStarStaticGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    def Tail(self, *args): return _pywrapgraph.ForwardStarStaticGraph_Tail(self, *args)
    def IsIncoming(self, *args): return _pywrapgraph.ForwardStarStaticGraph_IsIncoming(self, *args)
    def CheckArcBounds(self, *args): return _pywrapgraph.ForwardStarStaticGraph_CheckArcBounds(self, *args)
    def CheckArcValidity(self, *args): return _pywrapgraph.ForwardStarStaticGraph_CheckArcValidity(self, *args)
    def CheckTailIndexValidity(self, *args): return _pywrapgraph.ForwardStarStaticGraph_CheckTailIndexValidity(self, *args)
    def NextOutgoingArc(self, *args): return _pywrapgraph.ForwardStarStaticGraph_NextOutgoingArc(self, *args)
    def DebugString(self): return _pywrapgraph.ForwardStarStaticGraph_DebugString(self)
    def BuildTailArray(self): return _pywrapgraph.ForwardStarStaticGraph_BuildTailArray(self)
    def ReleaseTailArray(self): return _pywrapgraph.ForwardStarStaticGraph_ReleaseTailArray(self)
    def TailArrayComplete(self): return _pywrapgraph.ForwardStarStaticGraph_TailArrayComplete(self)
    __swig_destroy__ = _pywrapgraph.delete_ForwardStarStaticGraph
    __del__ = lambda self : None;
ForwardStarStaticGraph_swigregister = _pywrapgraph.ForwardStarStaticGraph_swigregister
ForwardStarStaticGraph_swigregister(ForwardStarStaticGraph)

class ForwardEbertLinearSumAssignment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardEbertLinearSumAssignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardEbertLinearSumAssignment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywrapgraph.new_ForwardEbertLinearSumAssignment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywrapgraph.delete_ForwardEbertLinearSumAssignment
    __del__ = lambda self : None;
    def SetGraph(self, *args): return _pywrapgraph.ForwardEbertLinearSumAssignment_SetGraph(self, *args)
    def SetCostScalingDivisor(self, *args): return _pywrapgraph.ForwardEbertLinearSumAssignment_SetCostScalingDivisor(self, *args)
    def ArcAnnotationCycleHandler(self): return _pywrapgraph.ForwardEbertLinearSumAssignment_ArcAnnotationCycleHandler(self)
    def OptimizeGraphLayout(self, *args): return _pywrapgraph.ForwardEbertLinearSumAssignment_OptimizeGraphLayout(self, *args)
    def Graph(self): return _pywrapgraph.ForwardEbertLinearSumAssignment_Graph(self)
    def Head(self, *args): return _pywrapgraph.ForwardEbertLinearSumAssignment_Head(self, *args)
    def ArcCost(self, *args): return _pywrapgraph.ForwardEbertLinearSumAssignment_ArcCost(self, *args)
    def SetArcCost(self, *args): return _pywrapgraph.ForwardEbertLinearSumAssignment_SetArcCost(self, *args)
    def FinalizeSetup(self): return _pywrapgraph.ForwardEbertLinearSumAssignment_FinalizeSetup(self)
    def ComputeAssignment(self): return _pywrapgraph.ForwardEbertLinearSumAssignment_ComputeAssignment(self)
    def GetCost(self): return _pywrapgraph.ForwardEbertLinearSumAssignment_GetCost(self)
    def NumNodes(self): return _pywrapgraph.ForwardEbertLinearSumAssignment_NumNodes(self)
    def NumLeftNodes(self): return _pywrapgraph.ForwardEbertLinearSumAssignment_NumLeftNodes(self)
    def GetAssignmentArc(self, *args): return _pywrapgraph.ForwardEbertLinearSumAssignment_GetAssignmentArc(self, *args)
    def GetAssignmentCost(self, *args): return _pywrapgraph.ForwardEbertLinearSumAssignment_GetAssignmentCost(self, *args)
    def GetMate(self, *args): return _pywrapgraph.ForwardEbertLinearSumAssignment_GetMate(self, *args)
    def StatsString(self): return _pywrapgraph.ForwardEbertLinearSumAssignment_StatsString(self)
ForwardEbertLinearSumAssignment_swigregister = _pywrapgraph.ForwardEbertLinearSumAssignment_swigregister
ForwardEbertLinearSumAssignment_swigregister(ForwardEbertLinearSumAssignment)

class EbertLinearSumAssignment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EbertLinearSumAssignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EbertLinearSumAssignment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pywrapgraph.new_EbertLinearSumAssignment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywrapgraph.delete_EbertLinearSumAssignment
    __del__ = lambda self : None;
    def SetGraph(self, *args): return _pywrapgraph.EbertLinearSumAssignment_SetGraph(self, *args)
    def SetCostScalingDivisor(self, *args): return _pywrapgraph.EbertLinearSumAssignment_SetCostScalingDivisor(self, *args)
    def ArcAnnotationCycleHandler(self): return _pywrapgraph.EbertLinearSumAssignment_ArcAnnotationCycleHandler(self)
    def OptimizeGraphLayout(self, *args): return _pywrapgraph.EbertLinearSumAssignment_OptimizeGraphLayout(self, *args)
    def Graph(self): return _pywrapgraph.EbertLinearSumAssignment_Graph(self)
    def Head(self, *args): return _pywrapgraph.EbertLinearSumAssignment_Head(self, *args)
    def ArcCost(self, *args): return _pywrapgraph.EbertLinearSumAssignment_ArcCost(self, *args)
    def SetArcCost(self, *args): return _pywrapgraph.EbertLinearSumAssignment_SetArcCost(self, *args)
    def FinalizeSetup(self): return _pywrapgraph.EbertLinearSumAssignment_FinalizeSetup(self)
    def ComputeAssignment(self): return _pywrapgraph.EbertLinearSumAssignment_ComputeAssignment(self)
    def GetCost(self): return _pywrapgraph.EbertLinearSumAssignment_GetCost(self)
    def NumNodes(self): return _pywrapgraph.EbertLinearSumAssignment_NumNodes(self)
    def NumLeftNodes(self): return _pywrapgraph.EbertLinearSumAssignment_NumLeftNodes(self)
    def GetAssignmentArc(self, *args): return _pywrapgraph.EbertLinearSumAssignment_GetAssignmentArc(self, *args)
    def GetAssignmentCost(self, *args): return _pywrapgraph.EbertLinearSumAssignment_GetAssignmentCost(self, *args)
    def GetMate(self, *args): return _pywrapgraph.EbertLinearSumAssignment_GetMate(self, *args)
    def StatsString(self): return _pywrapgraph.EbertLinearSumAssignment_StatsString(self)
EbertLinearSumAssignment_swigregister = _pywrapgraph.EbertLinearSumAssignment_swigregister
EbertLinearSumAssignment_swigregister(EbertLinearSumAssignment)

# This file is compatible with both classic and new-style classes.


